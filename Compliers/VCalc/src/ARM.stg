StartData() ::= <<
.arch armv7-a
.data
_format_string: .asciz "%d\n"
>>

StartText() ::= <<
.text
.globl main
main:
>>

Exit() ::= <<
mov R0, #0
mov R7, #1
swi 0
>>

Int(stack, val) ::= <<
mov R<stack>, #<val>
>>

InitVal(varName, val) ::= <<
<varName>:    .word <val>
>>

LoadVar(varName, stack) ::= <<
LDR   R0, =<varName>
LDR   R<stack>, [R0]
>>

StoreVar(varName, stack) ::= <<
LDR   R0, =<varName>
STR   R<stack>, [R0]
>>

StartLoop(Loopnum) ::= <<
loopStart<Loopnum>:
>>

ReLoop(Loopnum) ::= <<
B  loopStart<Loopnum>
>>

EndLoop(Loopnum) ::= <<
loopEnd<Loopnum>:
>>

EndIf(ifnum) ::= <<
if<ifnum>:
>>


Print(stack) ::= <<
push {ip, lr}
ldr R0, =_format_string
mov R1, R<stack>
bl printf
pop {ip, lr}
>>

Mul(stack, A, B) ::= <<
MUL R<stack>, R<A>, R<B>
>>

Div(stack, A, B) ::= <<
mov R0, R<A>
mov R1, R<B>
bl __aeabi_idiv(PLT)
mov R<stack>, R0
>>

Sub(stack, A, B) ::= <<
sub  R<stack>, R<A>, R<B>
>>

Add(stack,A,B) ::= <<
add  R<stack>, R<A>, R<B>
>>

Great(A,B, type, typenum) ::= <<
CMP R<A>, R<B>
BLE <type><typenum>
>>

Less(A, B, type, typenum) ::= <<
CMP R<A>, R<B>
BGE <type><typenum>
>>

Equal(A, B, type, typenum) ::= <<
CMP R<A>, R<B>
BNE <type><typenum>
>>

NotEqual(A, B, type, typenum) ::= <<
CMP R<A>, R<B>
BEQ <type><typenum>
>>