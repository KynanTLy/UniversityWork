StartData() ::= <<
.data
newline: .asciiz "\n"
>>

StartText() ::= <<
.text
main:
>>

Exit() ::= <<
li   $v0, 10
syscall
>>

Int(stack, val) ::= <<
addi $t<stack>, $zero, <val>
>>

InitVal(varName, val) ::= <<
<varName>:    .word <val>
>>

LoadVar(varName, stack) ::= <<
lw   $t<stack>  <varName>
>>

StoreVar(varName, stack) ::= <<
sw   $t<stack>, <varName>
>>

StartLoop(Loopnum) ::= <<
loopStart<Loopnum>:
>>

ReLoop(Loopnum) ::= <<
j  loopStart<Loopnum>
>>

EndLoop(Loopnum) ::= <<
loopEnd<Loopnum>:
>>

EndIf(ifnum) ::= <<
if<ifnum>:
>>

Print(stack) ::= <<
add  $a0, $zero, $t<stack>
li   $v0, 1
syscall
la   $a0, newline
li   $v0, 4
syscall
>>

Mul(stack, A, B) ::= <<
mul $t<stack>, $t<A>, $t<B>
>>

Div(stack, A, B) ::= <<
div $t<stack>,$t<A>, $t<B>
>>

Sub(stack, A, B) ::= <<
sub  $t<stack>, $t<A>, $t<B>
>>

Add(stack,A,B) ::= <<
add  $t<stack>, $t<A>, $t<B>
>>

Great(A,B, type, typenum) ::= <<
ble $t<A>, $t<B>, <type><typenum>
>>

Less(A, B, type, typenum) ::= <<
bge $t<A>, $t<B>, <type><typenum>
>>

Equal(A, B, type, typenum) ::= <<
bne $t<A>, $t<B>, <type><typenum>
>>

NotEqual(A, B, type, typenum) ::= <<
beq $t<A>, $t<B>, <type><typenum>
>>