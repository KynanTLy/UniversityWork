StartProg() ::= <<
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

;DECLARE VECTOR STRUCT TYPE
%struct.vector = type { i32, %struct.vector* }

;DEF REQUIRE FOR PRINTF("%d", int) is @.str99
@.str99 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.str = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str2 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str3 = private unnamed_addr constant [3 x i8] c"]\0A\00", align 1
@.str4 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

;=============NEXT VECTOR IN LL=============

; Function Attrs: nounwind uwtable
define void @getNextVec(%struct.vector* %v) #0 {
  %1 = alloca %struct.vector*, align 8
  store %struct.vector* %v, %struct.vector** %1, align 8
  %2 = load %struct.vector** %1, align 8
  %3 = icmp ne %struct.vector* %2, null
  br i1 %3, label %4, label %23

; \<label>:4                                       ; preds = %0
  %5 = load %struct.vector** %1, align 8
  %6 = getelementptr inbounds %struct.vector* %5, i32 0, i32 1
  %7 = load %struct.vector** %6, align 8
  %8 = icmp ne %struct.vector* %7, null
  br i1 %8, label %9, label %17

; \<label>:9                                       ; preds = %4
  %10 = load %struct.vector** %1, align 8
  %11 = getelementptr inbounds %struct.vector* %10, i32 0, i32 0
  %12 = load i32* %11, align 4
  %13 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 %12)
  %14 = load %struct.vector** %1, align 8
  %15 = getelementptr inbounds %struct.vector* %14, i32 0, i32 1
  %16 = load %struct.vector** %15, align 8
  call void @getNextVec(%struct.vector* %16)
  br label %22

; \<label>:17                                      ; preds = %4
  %18 = load %struct.vector** %1, align 8
  %19 = getelementptr inbounds %struct.vector* %18, i32 0, i32 0
  %20 = load i32* %19, align 4
  %21 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str1, i32 0, i32 0), i32 %20)
  br label %22

; \<label>:22                                      ; preds = %17, %9
  br label %23

; \<label>:23                                      ; preds = %22, %0
  ret void
}

declare i32 @printf(i8*, ...) #1
;=============NEXT VECTOR IN LL=============

;================PRINT VECTOR===============

; Function Attrs: nounwind uwtable
; Function Attrs: nounwind uwtable
define void @printVec(%struct.vector* %v) #0 {
  %1 = alloca %struct.vector*, align 8
  store %struct.vector* %v, %struct.vector** %1, align 8
  %2 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([2 x i8]* @.str2, i32 0, i32 0))
  %3 = load %struct.vector** %1, align 8
  %4 = icmp ne %struct.vector* %3, null
  br i1 %4, label %5, label %13

; \<label>:5                                       ; preds = %0
  %6 = load %struct.vector** %1, align 8
  %7 = getelementptr inbounds %struct.vector* %6, i32 0, i32 0
  %8 = load i32* %7, align 4
  %9 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 %8)
  %10 = load %struct.vector** %1, align 8
  %11 = getelementptr inbounds %struct.vector* %10, i32 0, i32 1
  %12 = load %struct.vector** %11, align 8
  call void @getNextVec(%struct.vector* %12)
  br label %13

; \<label>:13                                      ; preds = %5, %0
  %14 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str3, i32 0, i32 0))
  ret void
}
;===============END PRINT VECTOR===============

;==============RANGE=======================
; Function Attrs: nounwind uwtable
define %struct.vector* @Range(i32 %left, i32 %right) #0 {
  %1 = alloca %struct.vector*, align 8
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %current = alloca %struct.vector*, align 8
  %Rvec = alloca %struct.vector*, align 8
  %i = alloca i32, align 4
  %newNode = alloca %struct.vector*, align 8
  store i32 %left, i32* %2, align 4
  store i32 %right, i32* %3, align 4
  %4 = call noalias i8* @malloc(i64 16) #3
  %5 = bitcast i8* %4 to %struct.vector*
  store %struct.vector* %5, %struct.vector** %current, align 8
  %6 = load %struct.vector** %current, align 8
  store %struct.vector* %6, %struct.vector** %Rvec, align 8
  %7 = load i32* %2, align 4
  %8 = load i32* %3, align 4
  %9 = icmp sgt i32 %7, %8
  br i1 %9, label %10, label %11

; \<label>:10                                      ; preds = %0
  store %struct.vector* null, %struct.vector** %Rvec, align 8
  store %struct.vector* null, %struct.vector** %1
  br label %41

; \<label>:11                                      ; preds = %0
  %12 = load i32* %2, align 4
  store i32 %12, i32* %i, align 4
  br label %13

; \<label>:13                                      ; preds = %36, %11
  %14 = load i32* %i, align 4
  %15 = load i32* %3, align 4
  %16 = add nsw i32 %15, 1
  %17 = icmp slt i32 %14, %16
  br i1 %17, label %18, label %39

; \<label>:18                                      ; preds = %13
  %19 = load i32* %i, align 4
  %20 = load %struct.vector** %current, align 8
  %21 = getelementptr inbounds %struct.vector* %20, i32 0, i32 0
  store i32 %19, i32* %21, align 4
  %22 = load i32* %i, align 4
  %23 = load i32* %3, align 4
  %24 = icmp eq i32 %22, %23
  br i1 %24, label %25, label %28

; \<label>:25                                      ; preds = %18
  %26 = load %struct.vector** %current, align 8
  %27 = getelementptr inbounds %struct.vector* %26, i32 0, i32 1
  store %struct.vector* null, %struct.vector** %27, align 8
  br label %35

; \<label>:28                                      ; preds = %18
  %29 = call noalias i8* @malloc(i64 16) #3
  %30 = bitcast i8* %29 to %struct.vector*
  store %struct.vector* %30, %struct.vector** %newNode, align 8
  %31 = load %struct.vector** %newNode, align 8
  %32 = load %struct.vector** %current, align 8
  %33 = getelementptr inbounds %struct.vector* %32, i32 0, i32 1
  store %struct.vector* %31, %struct.vector** %33, align 8
  %34 = load %struct.vector** %newNode, align 8
  store %struct.vector* %34, %struct.vector** %current, align 8
  br label %35

; \<label>:35                                      ; preds = %28, %25
  br label %36

; \<label>:36                                      ; preds = %35
  %37 = load i32* %i, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %i, align 4
  br label %13

; \<label>:39                                      ; preds = %13
  %40 = load %struct.vector** %Rvec, align 8
  store %struct.vector* %40, %struct.vector** %1
  br label %41

; \<label>:41                                      ; preds = %39, %10
  %42 = load %struct.vector** %1
  ret %struct.vector* %42
}


; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #2

;==============END RANGE=======================

;===========RETURN INDEX============//
; Function Attrs: nounwind uwtable
define i32 @returnIndex(%struct.vector* %v, i32 %target, i32 %count) #0 {
  %1 = alloca i32, align 4
  %2 = alloca %struct.vector*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %r = alloca i32, align 4
  store %struct.vector* %v, %struct.vector** %2, align 8
  store i32 %target, i32* %3, align 4
  store i32 %count, i32* %4, align 4
  %5 = load %struct.vector** %2, align 8
  %6 = icmp ne %struct.vector* %5, null
  br i1 %6, label %7, label %24

; \<label>:7                                       ; preds = %0
  %8 = load i32* %4, align 4
  %9 = load i32* %3, align 4
  %10 = icmp eq i32 %8, %9
  br i1 %10, label %11, label %15

; \<label>:11                                      ; preds = %7
  %12 = load %struct.vector** %2, align 8
  %13 = getelementptr inbounds %struct.vector* %12, i32 0, i32 0
  %14 = load i32* %13, align 4
  store i32 %14, i32* %1
  br label %34

; \<label>:15                                      ; preds = %7
  %16 = load %struct.vector** %2, align 8
  %17 = getelementptr inbounds %struct.vector* %16, i32 0, i32 1
  %18 = load %struct.vector** %17, align 8
  %19 = load i32* %3, align 4
  %20 = load i32* %4, align 4
  %21 = add nsw i32 %20, 1
  %22 = call i32 @returnIndex(%struct.vector* %18, i32 %19, i32 %21)
  store i32 %22, i32* %r, align 4
  %23 = load i32* %r, align 4
  store i32 %23, i32* %1
  br label %34

; \<label>:24                                      ; preds = %0
  %25 = load %struct.vector** %2, align 8
  %26 = icmp eq %struct.vector* %25, null
  br i1 %26, label %27, label %32

; \<label>:27                                      ; preds = %24
  %28 = load i32* %4, align 4
  %29 = load i32* %3, align 4
  %30 = icmp slt i32 %28, %29
  br i1 %30, label %31, label %32

; \<label>:31                                      ; preds = %27
  store i32 0, i32* %1
  br label %34

; \<label>:32                                      ; preds = %27, %24
  br label %33

; \<label>:33                                      ; preds = %32
  store i32 0, i32* %1
  br label %34

; \<label>:34                                      ; preds = %33, %31, %15, %11
  %35 = load i32* %1
  ret i32 %35
}

;=============END RETURN INDEX============//

;=============SIZE VECTOR=================//
; Function Attrs: nounwind uwtable
define i32 @sizeVector(%struct.vector* %v, i32 %count) #0 {
  %1 = alloca i32, align 4
  %2 = alloca %struct.vector*, align 8
  %3 = alloca i32, align 4
  %result = alloca i32, align 4
  store %struct.vector* %v, %struct.vector** %2, align 8
  store i32 %count, i32* %3, align 4
  %4 = load %struct.vector** %2, align 8
  %5 = icmp ne %struct.vector* %4, null
  br i1 %5, label %6, label %22

; \<label>:6                                       ; preds = %0
  %7 = load %struct.vector** %2, align 8
  %8 = getelementptr inbounds %struct.vector* %7, i32 0, i32 1
  %9 = load %struct.vector** %8, align 8
  %10 = icmp eq %struct.vector* %9, null
  br i1 %10, label %11, label %14

; \<label>:11                                      ; preds = %6
  %12 = load i32* %3, align 4
  %13 = add nsw i32 %12, 1
  store i32 %13, i32* %1
  br label %23

; \<label>:14                                      ; preds = %6
  %15 = load %struct.vector** %2, align 8
  %16 = getelementptr inbounds %struct.vector* %15, i32 0, i32 1
  %17 = load %struct.vector** %16, align 8
  %18 = load i32* %3, align 4
  %19 = add nsw i32 %18, 1
  %20 = call i32 @sizeVector(%struct.vector* %17, i32 %19)
  store i32 %20, i32* %result, align 4
  %21 = load i32* %result, align 4
  store i32 %21, i32* %1
  br label %23

; \<label>:22                                      ; preds = %0
  store i32 0, i32* %1
  br label %23

; \<label>:23                                      ; preds = %22, %14, %11
  %24 = load i32* %1
  ret i32 %24
}
;=============END SIZE VECTOR=================//

;=============RETURN INDEX VECTOR=================//
; Function Attrs: nounwind uwtable
define %struct.vector* @returnIndexV(%struct.vector* %v, %struct.vector* %index) #0 {
  %1 = alloca %struct.vector*, align 8
  %2 = alloca %struct.vector*, align 8
  %3 = alloca %struct.vector*, align 8
  %current = alloca %struct.vector*, align 8
  %Rvec = alloca %struct.vector*, align 8
  %sizeV = alloca i32, align 4
  %sizeI = alloca i32, align 4
  %i = alloca i32, align 4
  %newNode = alloca %struct.vector*, align 8
  store %struct.vector* %v, %struct.vector** %2, align 8
  store %struct.vector* %index, %struct.vector** %3, align 8
  %4 = call noalias i8* @malloc(i64 16) #3
  %5 = bitcast i8* %4 to %struct.vector*
  store %struct.vector* %5, %struct.vector** %current, align 8
  %6 = load %struct.vector** %current, align 8
  store %struct.vector* %6, %struct.vector** %Rvec, align 8
  %7 = load %struct.vector** %2, align 8
  %8 = icmp eq %struct.vector* %7, null
  br i1 %8, label %9, label %13

; \<label>:9                                       ; preds = %0
  %10 = load %struct.vector** %3, align 8
  %11 = icmp eq %struct.vector* %10, null
  br i1 %11, label %12, label %13

; \<label>:12                                      ; preds = %9
  store %struct.vector* null, %struct.vector** %Rvec, align 8
  store %struct.vector* null, %struct.vector** %1
  br label %54

; \<label>:13                                      ; preds = %9, %0
  %14 = load %struct.vector** %2, align 8
  %15 = call i32 @sizeVector(%struct.vector* %14, i32 0)
  store i32 %15, i32* %sizeV, align 4
  %16 = load %struct.vector** %3, align 8
  %17 = call i32 @sizeVector(%struct.vector* %16, i32 0)
  store i32 %17, i32* %sizeI, align 4
  %18 = load i32* %sizeI, align 4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %21

; \<label>:20                                      ; preds = %13
  store %struct.vector* null, %struct.vector** %Rvec, align 8
  store %struct.vector* null, %struct.vector** %1
  br label %54

; \<label>:21                                      ; preds = %13
  store i32 0, i32* %i, align 4
  br label %22

; \<label>:22                                      ; preds = %49, %21
  %23 = load i32* %i, align 4
  %24 = load i32* %sizeI, align 4
  %25 = icmp slt i32 %23, %24
  br i1 %25, label %26, label %52

; \<label>:26                                      ; preds = %22
  %27 = load %struct.vector** %2, align 8
  %28 = load %struct.vector** %3, align 8
  %29 = load i32* %i, align 4
  %30 = call i32 @returnIndex(%struct.vector* %28, i32 %29, i32 0)
  %31 = call i32 @returnIndex(%struct.vector* %27, i32 %30, i32 0)
  %32 = load %struct.vector** %current, align 8
  %33 = getelementptr inbounds %struct.vector* %32, i32 0, i32 0
  store i32 %31, i32* %33, align 4
  %34 = load i32* %i, align 4
  %35 = load i32* %sizeI, align 4
  %36 = sub nsw i32 %35, 1
  %37 = icmp eq i32 %34, %36
  br i1 %37, label %38, label %41

; \<label>:38                                      ; preds = %26
  %39 = load %struct.vector** %current, align 8
  %40 = getelementptr inbounds %struct.vector* %39, i32 0, i32 1
  store %struct.vector* null, %struct.vector** %40, align 8
  br label %48

; \<label>:41                                      ; preds = %26
  %42 = call noalias i8* @malloc(i64 16) #3
  %43 = bitcast i8* %42 to %struct.vector*
  store %struct.vector* %43, %struct.vector** %newNode, align 8
  %44 = load %struct.vector** %newNode, align 8
  %45 = load %struct.vector** %current, align 8
  %46 = getelementptr inbounds %struct.vector* %45, i32 0, i32 1
  store %struct.vector* %44, %struct.vector** %46, align 8
  %47 = load %struct.vector** %newNode, align 8
  store %struct.vector* %47, %struct.vector** %current, align 8
  br label %48

; \<label>:48                                      ; preds = %41, %38
  br label %49

; \<label>:49                                      ; preds = %48
  %50 = load i32* %i, align 4
  %51 = add nsw i32 %50, 1
  store i32 %51, i32* %i, align 4
  br label %22

; \<label>:52                                      ; preds = %22
  %53 = load %struct.vector** %Rvec, align 8
  store %struct.vector* %53, %struct.vector** %1
  br label %54

; \<label>:54                                      ; preds = %52, %20, %12
  %55 = load %struct.vector** %1
  ret %struct.vector* %55
}

;===========END  RETURNINDEXV===============//

;==========CLONE=================//
; Function Attrs: nounwind uwtable
define %struct.vector* @clone(%struct.vector* %v) #0 {
  %1 = alloca %struct.vector*, align 8
  %2 = alloca %struct.vector*, align 8
  %current = alloca %struct.vector*, align 8
  %Rvec = alloca %struct.vector*, align 8
  %val = alloca i32, align 4
  %newNode = alloca %struct.vector*, align 8
  store %struct.vector* %v, %struct.vector** %2, align 8
  %3 = call noalias i8* @malloc(i64 16) #3
  %4 = bitcast i8* %3 to %struct.vector*
  store %struct.vector* %4, %struct.vector** %current, align 8
  %5 = load %struct.vector** %current, align 8
  store %struct.vector* %5, %struct.vector** %Rvec, align 8
  %6 = load %struct.vector** %2, align 8
  %7 = icmp eq %struct.vector* %6, null
  br i1 %7, label %8, label %10

; \<label>:8                                       ; preds = %0
  %9 = load %struct.vector** %Rvec, align 8
  store %struct.vector* %9, %struct.vector** %1
  br label %38

; \<label>:10                                      ; preds = %0
  br label %11

; \<label>:11                                      ; preds = %10, %35
  %12 = load %struct.vector** %2, align 8
  %13 = getelementptr inbounds %struct.vector* %12, i32 0, i32 0
  %14 = load i32* %13, align 4
  store i32 %14, i32* %val, align 4
  %15 = load i32* %val, align 4
  %16 = load %struct.vector** %current, align 8
  %17 = getelementptr inbounds %struct.vector* %16, i32 0, i32 0
  store i32 %15, i32* %17, align 4
  %18 = load %struct.vector** %2, align 8
  %19 = getelementptr inbounds %struct.vector* %18, i32 0, i32 1
  %20 = load %struct.vector** %19, align 8
  %21 = icmp eq %struct.vector* %20, null
  br i1 %21, label %22, label %25

; \<label>:22                                      ; preds = %11
  %23 = load %struct.vector** %current, align 8
  %24 = getelementptr inbounds %struct.vector* %23, i32 0, i32 1
  store %struct.vector* null, %struct.vector** %24, align 8
  br label %36

; \<label>:25                                      ; preds = %11
  %26 = call noalias i8* @malloc(i64 16) #3
  %27 = bitcast i8* %26 to %struct.vector*
  store %struct.vector* %27, %struct.vector** %newNode, align 8
  %28 = load %struct.vector** %newNode, align 8
  %29 = load %struct.vector** %current, align 8
  %30 = getelementptr inbounds %struct.vector* %29, i32 0, i32 1
  store %struct.vector* %28, %struct.vector** %30, align 8
  %31 = load %struct.vector** %newNode, align 8
  store %struct.vector* %31, %struct.vector** %current, align 8
  %32 = load %struct.vector** %2, align 8
  %33 = getelementptr inbounds %struct.vector* %32, i32 0, i32 1
  %34 = load %struct.vector** %33, align 8
  store %struct.vector* %34, %struct.vector** %2, align 8
  br label %35

; \<label>:35                                      ; preds = %25
  br label %11

; \<label>:36                                      ; preds = %22
  %37 = load %struct.vector** %Rvec, align 8
  store %struct.vector* %37, %struct.vector** %1
  br label %38

; \<label>:38                                      ; preds = %36, %8
  %39 = load %struct.vector** %1
  ret %struct.vector* %39
}


;===========END CLONE==================//

;===========VECTOR EXTEND===============//
; Function Attrs: nounwind uwtable
define %struct.vector* @vectorE(%struct.vector* %v, i32 %size, i32 %type) #0 {
  %1 = alloca %struct.vector*, align 8
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %Rvec = alloca %struct.vector*, align 8
  %current = alloca %struct.vector*, align 8
  %temp = alloca %struct.vector*, align 8
  %newNode = alloca %struct.vector*, align 8
  %a = alloca i32, align 4
  %dif = alloca i32, align 4
  %i = alloca i32, align 4
  %newNode1 = alloca %struct.vector*, align 8
  store %struct.vector* %v, %struct.vector** %1, align 8
  store i32 %size, i32* %2, align 4
  store i32 %type, i32* %3, align 4
  %4 = load %struct.vector** %1, align 8
  %5 = icmp eq %struct.vector* %4, null
  br i1 %5, label %6, label %12

; \<label>:6                                       ; preds = %0
  %7 = call noalias i8* @malloc(i64 16) #3
  %8 = bitcast i8* %7 to %struct.vector*
  store %struct.vector* %8, %struct.vector** %current, align 8
  %9 = load %struct.vector** %current, align 8
  %10 = getelementptr inbounds %struct.vector* %9, i32 0, i32 1
  store %struct.vector* null, %struct.vector** %10, align 8
  %11 = load %struct.vector** %current, align 8
  store %struct.vector* %11, %struct.vector** %Rvec, align 8
  br label %17

; \<label>:12                                      ; preds = %0
  %13 = load %struct.vector** %1, align 8
  %14 = call %struct.vector* @clone(%struct.vector* %13)
  store %struct.vector* %14, %struct.vector** %temp, align 8
  %15 = load %struct.vector** %temp, align 8
  store %struct.vector* %15, %struct.vector** %current, align 8
  %16 = load %struct.vector** %current, align 8
  store %struct.vector* %16, %struct.vector** %Rvec, align 8
  br label %17

; \<label>:17                                      ; preds = %12, %6
  br label %18

; \<label>:18                                      ; preds = %17, %30
  %19 = load %struct.vector** %current, align 8
  %20 = getelementptr inbounds %struct.vector* %19, i32 0, i32 1
  %21 = load %struct.vector** %20, align 8
  %22 = icmp ne %struct.vector* %21, null
  br i1 %22, label %23, label %27

; \<label>:23                                      ; preds = %18
  %24 = load %struct.vector** %current, align 8
  %25 = getelementptr inbounds %struct.vector* %24, i32 0, i32 1
  %26 = load %struct.vector** %25, align 8
  store %struct.vector* %26, %struct.vector** %current, align 8
  br label %30

; \<label>:27                                      ; preds = %18
  %28 = load %struct.vector** %current, align 8
  %29 = getelementptr inbounds %struct.vector* %28, i32 0, i32 1
  store %struct.vector* null, %struct.vector** %29, align 8
  br label %31

; \<label>:30                                      ; preds = %23
  br label %18

; \<label>:31                                      ; preds = %27
  %32 = call noalias i8* @malloc(i64 16) #3
  %33 = bitcast i8* %32 to %struct.vector*
  store %struct.vector* %33, %struct.vector** %newNode, align 8
  %34 = load %struct.vector** %newNode, align 8
  %35 = load %struct.vector** %current, align 8
  %36 = getelementptr inbounds %struct.vector* %35, i32 0, i32 1
  store %struct.vector* %34, %struct.vector** %36, align 8
  %37 = load %struct.vector** %newNode, align 8
  store %struct.vector* %37, %struct.vector** %current, align 8
  %38 = load %struct.vector** %1, align 8
  %39 = call i32 @sizeVector(%struct.vector* %38, i32 0)
  store i32 %39, i32* %a, align 4
  %40 = load i32* %2, align 4
  %41 = load i32* %a, align 4
  %42 = sub nsw i32 %40, %41
  store i32 %42, i32* %dif, align 4
  store i32 0, i32* %i, align 4
  br label %43

; \<label>:43                                      ; preds = %81, %31
  %44 = load i32* %i, align 4
  %45 = load i32* %dif, align 4
  %46 = icmp slt i32 %44, %45
  br i1 %46, label %47, label %84

; \<label>:47                                      ; preds = %43
  %48 = load i32* %i, align 4
  %49 = load i32* %dif, align 4
  %50 = sub nsw i32 %49, 1
  %51 = icmp eq i32 %48, %50
  br i1 %51, label %52, label %64

; \<label>:52                                      ; preds = %47
  %53 = load i32* %3, align 4
  %54 = icmp ne i32 %53, 0
  br i1 %54, label %55, label %58

; \<label>:55                                      ; preds = %52
  %56 = load %struct.vector** %current, align 8
  %57 = getelementptr inbounds %struct.vector* %56, i32 0, i32 0
  store i32 1, i32* %57, align 4
  br label %61

; \<label>:58                                      ; preds = %52
  %59 = load %struct.vector** %current, align 8
  %60 = getelementptr inbounds %struct.vector* %59, i32 0, i32 0
  store i32 0, i32* %60, align 4
  br label %61

; \<label>:61                                      ; preds = %58, %55
  %62 = load %struct.vector** %current, align 8
  %63 = getelementptr inbounds %struct.vector* %62, i32 0, i32 1
  store %struct.vector* null, %struct.vector** %63, align 8
  br label %80

; \<label>:64                                      ; preds = %47
  %65 = call noalias i8* @malloc(i64 16) #3
  %66 = bitcast i8* %65 to %struct.vector*
  store %struct.vector* %66, %struct.vector** %newNode1, align 8
  %67 = load i32* %3, align 4
  %68 = icmp ne i32 %67, 0
  br i1 %68, label %69, label %72

; \<label>:69                                      ; preds = %64
  %70 = load %struct.vector** %current, align 8
  %71 = getelementptr inbounds %struct.vector* %70, i32 0, i32 0
  store i32 1, i32* %71, align 4
  br label %75

; \<label>:72                                      ; preds = %64
  %73 = load %struct.vector** %current, align 8
  %74 = getelementptr inbounds %struct.vector* %73, i32 0, i32 0
  store i32 0, i32* %74, align 4
  br label %75

; \<label>:75                                      ; preds = %72, %69
  %76 = load %struct.vector** %newNode1, align 8
  %77 = load %struct.vector** %current, align 8
  %78 = getelementptr inbounds %struct.vector* %77, i32 0, i32 1
  store %struct.vector* %76, %struct.vector** %78, align 8
  %79 = load %struct.vector** %newNode1, align 8
  store %struct.vector* %79, %struct.vector** %current, align 8
  br label %80

; \<label>:80                                      ; preds = %75, %61
  br label %81

; \<label>:81                                      ; preds = %80
  %82 = load i32* %i, align 4
  %83 = add nsw i32 %82, 1
  store i32 %83, i32* %i, align 4
  br label %43

; \<label>:84                                      ; preds = %43
  %85 = load %struct.vector** %Rvec, align 8
  ret %struct.vector* %85
}

;===========END  VECTOR EXTEND===============//

;===========END  INT PROMOTE===============//

; Function Attrs: nounwind uwtable
define %struct.vector* @intPromote(i32 %value, i32 %size) #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %current = alloca %struct.vector*, align 8
  %Rvec = alloca %struct.vector*, align 8
  %i = alloca i32, align 4
  %newNode = alloca %struct.vector*, align 8
  store i32 %value, i32* %1, align 4
  store i32 %size, i32* %2, align 4
  %3 = call noalias i8* @malloc(i64 16) #3
  %4 = bitcast i8* %3 to %struct.vector*
  store %struct.vector* %4, %struct.vector** %current, align 8
  %5 = load %struct.vector** %current, align 8
  store %struct.vector* %5, %struct.vector** %Rvec, align 8
  store i32 0, i32* %i, align 4
  br label %6

; \<label>:6                                       ; preds = %32, %0
  %7 = load i32* %i, align 4
  %8 = load i32* %2, align 4
  %9 = icmp slt i32 %7, %8
  br i1 %9, label %10, label %35

; \<label>:10                                      ; preds = %6
  %11 = load i32* %i, align 4
  %12 = load i32* %2, align 4
  %13 = sub nsw i32 %12, 1
  %14 = icmp eq i32 %11, %13
  br i1 %14, label %15, label %21

; \<label>:15                                      ; preds = %10
  %16 = load i32* %1, align 4
  %17 = load %struct.vector** %current, align 8
  %18 = getelementptr inbounds %struct.vector* %17, i32 0, i32 0
  store i32 %16, i32* %18, align 4
  %19 = load %struct.vector** %current, align 8
  %20 = getelementptr inbounds %struct.vector* %19, i32 0, i32 1
  store %struct.vector* null, %struct.vector** %20, align 8
  br label %31

; \<label>:21                                      ; preds = %10
  %22 = call noalias i8* @malloc(i64 16) #3
  %23 = bitcast i8* %22 to %struct.vector*
  store %struct.vector* %23, %struct.vector** %newNode, align 8
  %24 = load i32* %1, align 4
  %25 = load %struct.vector** %current, align 8
  %26 = getelementptr inbounds %struct.vector* %25, i32 0, i32 0
  store i32 %24, i32* %26, align 4
  %27 = load %struct.vector** %newNode, align 8
  %28 = load %struct.vector** %current, align 8
  %29 = getelementptr inbounds %struct.vector* %28, i32 0, i32 1
  store %struct.vector* %27, %struct.vector** %29, align 8
  %30 = load %struct.vector** %newNode, align 8
  store %struct.vector* %30, %struct.vector** %current, align 8
  br label %31

; \<label>:31                                      ; preds = %21, %15
  br label %32

; \<label>:32                                      ; preds = %31
  %33 = load i32* %i, align 4
  %34 = add nsw i32 %33, 1
  store i32 %34, i32* %i, align 4
  br label %6

; \<label>:35                                      ; preds = %6
  %36 = load %struct.vector** %Rvec, align 8
  ret %struct.vector* %36
}


;===========END  INT PROMOTE===============//

;=========== ADD===============//
; Function Attrs: nounwind uwtable
define %struct.vector* @vecAdd(%struct.vector* %left, %struct.vector* %right) #0 {
  %1 = alloca %struct.vector*, align 8
  %2 = alloca %struct.vector*, align 8
  %current = alloca %struct.vector*, align 8
  %Rvec = alloca %struct.vector*, align 8
  %size = alloca i32, align 4
  %i = alloca i32, align 4
  %newNode = alloca %struct.vector*, align 8
  store %struct.vector* %left, %struct.vector** %1, align 8
  store %struct.vector* %right, %struct.vector** %2, align 8
  %3 = call noalias i8* @malloc(i64 16) #3
  %4 = bitcast i8* %3 to %struct.vector*
  store %struct.vector* %4, %struct.vector** %current, align 8
  %5 = load %struct.vector** %current, align 8
  store %struct.vector* %5, %struct.vector** %Rvec, align 8
  %6 = load %struct.vector** %1, align 8
  %7 = call i32 @sizeVector(%struct.vector* %6, i32 0)
  store i32 %7, i32* %size, align 4
  store i32 0, i32* %i, align 4
  br label %8

; \<label>:8                                       ; preds = %43, %0
  %9 = load i32* %i, align 4
  %10 = load i32* %size, align 4
  %11 = icmp slt i32 %9, %10
  br i1 %11, label %12, label %46

; \<label>:12                                      ; preds = %8
  %13 = load %struct.vector** %1, align 8
  %14 = getelementptr inbounds %struct.vector* %13, i32 0, i32 0
  %15 = load i32* %14, align 4
  %16 = load %struct.vector** %2, align 8
  %17 = getelementptr inbounds %struct.vector* %16, i32 0, i32 0
  %18 = load i32* %17, align 4
  %19 = add nsw i32 %15, %18
  %20 = load %struct.vector** %current, align 8
  %21 = getelementptr inbounds %struct.vector* %20, i32 0, i32 0
  store i32 %19, i32* %21, align 4
  %22 = load i32* %i, align 4
  %23 = load i32* %size, align 4
  %24 = sub nsw i32 %23, 1
  %25 = icmp eq i32 %22, %24
  br i1 %25, label %26, label %29

; \<label>:26                                      ; preds = %12
  %27 = load %struct.vector** %current, align 8
  %28 = getelementptr inbounds %struct.vector* %27, i32 0, i32 1
  store %struct.vector* null, %struct.vector** %28, align 8
  br label %42

; \<label>:29                                      ; preds = %12
  %30 = call noalias i8* @malloc(i64 16) #3
  %31 = bitcast i8* %30 to %struct.vector*
  store %struct.vector* %31, %struct.vector** %newNode, align 8
  %32 = load %struct.vector** %newNode, align 8
  %33 = load %struct.vector** %current, align 8
  %34 = getelementptr inbounds %struct.vector* %33, i32 0, i32 1
  store %struct.vector* %32, %struct.vector** %34, align 8
  %35 = load %struct.vector** %newNode, align 8
  store %struct.vector* %35, %struct.vector** %current, align 8
  %36 = load %struct.vector** %1, align 8
  %37 = getelementptr inbounds %struct.vector* %36, i32 0, i32 1
  %38 = load %struct.vector** %37, align 8
  store %struct.vector* %38, %struct.vector** %1, align 8
  %39 = load %struct.vector** %2, align 8
  %40 = getelementptr inbounds %struct.vector* %39, i32 0, i32 1
  %41 = load %struct.vector** %40, align 8
  store %struct.vector* %41, %struct.vector** %2, align 8
  br label %42

; \<label>:42                                      ; preds = %29, %26
  br label %43

; \<label>:43                                      ; preds = %42
  %44 = load i32* %i, align 4
  %45 = add nsw i32 %44, 1
  store i32 %45, i32* %i, align 4
  br label %8

; \<label>:46                                      ; preds = %8
  %47 = load %struct.vector** %Rvec, align 8
  ret %struct.vector* %47
}
;===========END ADD===============//

;=========== SUB===============//
; Function Attrs: nounwind uwtable
define %struct.vector* @vecSub(%struct.vector* %left, %struct.vector* %right) #0 {
  %1 = alloca %struct.vector*, align 8
  %2 = alloca %struct.vector*, align 8
  %current = alloca %struct.vector*, align 8
  %Rvec = alloca %struct.vector*, align 8
  %size = alloca i32, align 4
  %i = alloca i32, align 4
  %newNode = alloca %struct.vector*, align 8
  store %struct.vector* %left, %struct.vector** %1, align 8
  store %struct.vector* %right, %struct.vector** %2, align 8
  %3 = call noalias i8* @malloc(i64 16) #3
  %4 = bitcast i8* %3 to %struct.vector*
  store %struct.vector* %4, %struct.vector** %current, align 8
  %5 = load %struct.vector** %current, align 8
  store %struct.vector* %5, %struct.vector** %Rvec, align 8
  %6 = load %struct.vector** %1, align 8
  %7 = call i32 @sizeVector(%struct.vector* %6, i32 0)
  store i32 %7, i32* %size, align 4
  store i32 0, i32* %i, align 4
  br label %8

; \<label>:8                                       ; preds = %43, %0
  %9 = load i32* %i, align 4
  %10 = load i32* %size, align 4
  %11 = icmp slt i32 %9, %10
  br i1 %11, label %12, label %46

; \<label>:12                                      ; preds = %8
  %13 = load %struct.vector** %1, align 8
  %14 = getelementptr inbounds %struct.vector* %13, i32 0, i32 0
  %15 = load i32* %14, align 4
  %16 = load %struct.vector** %2, align 8
  %17 = getelementptr inbounds %struct.vector* %16, i32 0, i32 0
  %18 = load i32* %17, align 4
  %19 = sub nsw i32 %15, %18
  %20 = load %struct.vector** %current, align 8
  %21 = getelementptr inbounds %struct.vector* %20, i32 0, i32 0
  store i32 %19, i32* %21, align 4
  %22 = load i32* %i, align 4
  %23 = load i32* %size, align 4
  %24 = sub nsw i32 %23, 1
  %25 = icmp eq i32 %22, %24
  br i1 %25, label %26, label %29

; \<label>:26                                      ; preds = %12
  %27 = load %struct.vector** %current, align 8
  %28 = getelementptr inbounds %struct.vector* %27, i32 0, i32 1
  store %struct.vector* null, %struct.vector** %28, align 8
  br label %42

; \<label>:29                                      ; preds = %12
  %30 = call noalias i8* @malloc(i64 16) #3
  %31 = bitcast i8* %30 to %struct.vector*
  store %struct.vector* %31, %struct.vector** %newNode, align 8
  %32 = load %struct.vector** %newNode, align 8
  %33 = load %struct.vector** %current, align 8
  %34 = getelementptr inbounds %struct.vector* %33, i32 0, i32 1
  store %struct.vector* %32, %struct.vector** %34, align 8
  %35 = load %struct.vector** %newNode, align 8
  store %struct.vector* %35, %struct.vector** %current, align 8
  %36 = load %struct.vector** %1, align 8
  %37 = getelementptr inbounds %struct.vector* %36, i32 0, i32 1
  %38 = load %struct.vector** %37, align 8
  store %struct.vector* %38, %struct.vector** %1, align 8
  %39 = load %struct.vector** %2, align 8
  %40 = getelementptr inbounds %struct.vector* %39, i32 0, i32 1
  %41 = load %struct.vector** %40, align 8
  store %struct.vector* %41, %struct.vector** %2, align 8
  br label %42

; \<label>:42                                      ; preds = %29, %26
  br label %43

; \<label>:43                                      ; preds = %42
  %44 = load i32* %i, align 4
  %45 = add nsw i32 %44, 1
  store i32 %45, i32* %i, align 4
  br label %8

; \<label>:46                                      ; preds = %8
  %47 = load %struct.vector** %Rvec, align 8
  ret %struct.vector* %47
}
;===========END SUB===============//

;=========== MUL===============//
; Function Attrs: nounwind uwtable
define %struct.vector* @vecMul(%struct.vector* %left, %struct.vector* %right) #0 {
  %1 = alloca %struct.vector*, align 8
  %2 = alloca %struct.vector*, align 8
  %current = alloca %struct.vector*, align 8
  %Rvec = alloca %struct.vector*, align 8
  %size = alloca i32, align 4
  %i = alloca i32, align 4
  %newNode = alloca %struct.vector*, align 8
  store %struct.vector* %left, %struct.vector** %1, align 8
  store %struct.vector* %right, %struct.vector** %2, align 8
  %3 = call noalias i8* @malloc(i64 16) #3
  %4 = bitcast i8* %3 to %struct.vector*
  store %struct.vector* %4, %struct.vector** %current, align 8
  %5 = load %struct.vector** %current, align 8
  store %struct.vector* %5, %struct.vector** %Rvec, align 8
  %6 = load %struct.vector** %1, align 8
  %7 = call i32 @sizeVector(%struct.vector* %6, i32 0)
  store i32 %7, i32* %size, align 4
  store i32 0, i32* %i, align 4
  br label %8

; \<label>:8                                       ; preds = %43, %0
  %9 = load i32* %i, align 4
  %10 = load i32* %size, align 4
  %11 = icmp slt i32 %9, %10
  br i1 %11, label %12, label %46

; \<label>:12                                      ; preds = %8
  %13 = load %struct.vector** %1, align 8
  %14 = getelementptr inbounds %struct.vector* %13, i32 0, i32 0
  %15 = load i32* %14, align 4
  %16 = load %struct.vector** %2, align 8
  %17 = getelementptr inbounds %struct.vector* %16, i32 0, i32 0
  %18 = load i32* %17, align 4
  %19 = mul nsw i32 %15, %18
  %20 = load %struct.vector** %current, align 8
  %21 = getelementptr inbounds %struct.vector* %20, i32 0, i32 0
  store i32 %19, i32* %21, align 4
  %22 = load i32* %i, align 4
  %23 = load i32* %size, align 4
  %24 = sub nsw i32 %23, 1
  %25 = icmp eq i32 %22, %24
  br i1 %25, label %26, label %29

; \<label>:26                                      ; preds = %12
  %27 = load %struct.vector** %current, align 8
  %28 = getelementptr inbounds %struct.vector* %27, i32 0, i32 1
  store %struct.vector* null, %struct.vector** %28, align 8
  br label %42

; \<label>:29                                      ; preds = %12
  %30 = call noalias i8* @malloc(i64 16) #3
  %31 = bitcast i8* %30 to %struct.vector*
  store %struct.vector* %31, %struct.vector** %newNode, align 8
  %32 = load %struct.vector** %newNode, align 8
  %33 = load %struct.vector** %current, align 8
  %34 = getelementptr inbounds %struct.vector* %33, i32 0, i32 1
  store %struct.vector* %32, %struct.vector** %34, align 8
  %35 = load %struct.vector** %newNode, align 8
  store %struct.vector* %35, %struct.vector** %current, align 8
  %36 = load %struct.vector** %1, align 8
  %37 = getelementptr inbounds %struct.vector* %36, i32 0, i32 1
  %38 = load %struct.vector** %37, align 8
  store %struct.vector* %38, %struct.vector** %1, align 8
  %39 = load %struct.vector** %2, align 8
  %40 = getelementptr inbounds %struct.vector* %39, i32 0, i32 1
  %41 = load %struct.vector** %40, align 8
  store %struct.vector* %41, %struct.vector** %2, align 8
  br label %42

; \<label>:42                                      ; preds = %29, %26
  br label %43

; \<label>:43                                      ; preds = %42
  %44 = load i32* %i, align 4
  %45 = add nsw i32 %44, 1
  store i32 %45, i32* %i, align 4
  br label %8

; \<label>:46                                      ; preds = %8
  %47 = load %struct.vector** %Rvec, align 8
  ret %struct.vector* %47
}
;===========END MUL===============//

;=========== DIV===============//
; Function Attrs: nounwind uwtable
define %struct.vector* @vecDiv(%struct.vector* %left, %struct.vector* %right) #0 {
  %1 = alloca %struct.vector*, align 8
  %2 = alloca %struct.vector*, align 8
  %current = alloca %struct.vector*, align 8
  %Rvec = alloca %struct.vector*, align 8
  %size = alloca i32, align 4
  %i = alloca i32, align 4
  %newNode = alloca %struct.vector*, align 8
  store %struct.vector* %left, %struct.vector** %1, align 8
  store %struct.vector* %right, %struct.vector** %2, align 8
  %3 = call noalias i8* @malloc(i64 16) #3
  %4 = bitcast i8* %3 to %struct.vector*
  store %struct.vector* %4, %struct.vector** %current, align 8
  %5 = load %struct.vector** %current, align 8
  store %struct.vector* %5, %struct.vector** %Rvec, align 8
  %6 = load %struct.vector** %1, align 8
  %7 = call i32 @sizeVector(%struct.vector* %6, i32 0)
  store i32 %7, i32* %size, align 4
  store i32 0, i32* %i, align 4
  br label %8

; \<label>:8                                       ; preds = %43, %0
  %9 = load i32* %i, align 4
  %10 = load i32* %size, align 4
  %11 = icmp slt i32 %9, %10
  br i1 %11, label %12, label %46

; \<label>:12                                      ; preds = %8
  %13 = load %struct.vector** %1, align 8
  %14 = getelementptr inbounds %struct.vector* %13, i32 0, i32 0
  %15 = load i32* %14, align 4
  %16 = load %struct.vector** %2, align 8
  %17 = getelementptr inbounds %struct.vector* %16, i32 0, i32 0
  %18 = load i32* %17, align 4
  %19 = sdiv i32 %15, %18
  %20 = load %struct.vector** %current, align 8
  %21 = getelementptr inbounds %struct.vector* %20, i32 0, i32 0
  store i32 %19, i32* %21, align 4
  %22 = load i32* %i, align 4
  %23 = load i32* %size, align 4
  %24 = sub nsw i32 %23, 1
  %25 = icmp eq i32 %22, %24
  br i1 %25, label %26, label %29

; \<label>:26                                      ; preds = %12
  %27 = load %struct.vector** %current, align 8
  %28 = getelementptr inbounds %struct.vector* %27, i32 0, i32 1
  store %struct.vector* null, %struct.vector** %28, align 8
  br label %42

; \<label>:29                                      ; preds = %12
  %30 = call noalias i8* @malloc(i64 16) #3
  %31 = bitcast i8* %30 to %struct.vector*
  store %struct.vector* %31, %struct.vector** %newNode, align 8
  %32 = load %struct.vector** %newNode, align 8
  %33 = load %struct.vector** %current, align 8
  %34 = getelementptr inbounds %struct.vector* %33, i32 0, i32 1
  store %struct.vector* %32, %struct.vector** %34, align 8
  %35 = load %struct.vector** %newNode, align 8
  store %struct.vector* %35, %struct.vector** %current, align 8
  %36 = load %struct.vector** %1, align 8
  %37 = getelementptr inbounds %struct.vector* %36, i32 0, i32 1
  %38 = load %struct.vector** %37, align 8
  store %struct.vector* %38, %struct.vector** %1, align 8
  %39 = load %struct.vector** %2, align 8
  %40 = getelementptr inbounds %struct.vector* %39, i32 0, i32 1
  %41 = load %struct.vector** %40, align 8
  store %struct.vector* %41, %struct.vector** %2, align 8
  br label %42

; \<label>:42                                      ; preds = %29, %26
  br label %43

; \<label>:43                                      ; preds = %42
  %44 = load i32* %i, align 4
  %45 = add nsw i32 %44, 1
  store i32 %45, i32* %i, align 4
  br label %8

; \<label>:46                                      ; preds = %8
  %47 = load %struct.vector** %Rvec, align 8
  ret %struct.vector* %47
}
;===========END DIV===============//

;===========BIGGER===============//

; Function Attrs: nounwind uwtable
define i32 @bigger(%struct.vector* %left, %struct.vector* %right) #0 {
  %1 = alloca i32, align 4
  %2 = alloca %struct.vector*, align 8
  %3 = alloca %struct.vector*, align 8
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  store %struct.vector* %left, %struct.vector** %2, align 8
  store %struct.vector* %right, %struct.vector** %3, align 8
  %4 = load %struct.vector** %2, align 8
  %5 = call i32 @sizeVector(%struct.vector* %4, i32 0)
  store i32 %5, i32* %a, align 4
  %6 = load %struct.vector** %3, align 8
  %7 = call i32 @sizeVector(%struct.vector* %6, i32 0)
  store i32 %7, i32* %b, align 4
  %8 = load i32* %a, align 4
  %9 = load i32* %b, align 4
  %10 = icmp sge i32 %8, %9
  br i1 %10, label %11, label %13

; \<label>:11                                      ; preds = %0
  %12 = load i32* %a, align 4
  store i32 %12, i32* %1
  br label %15

; \<label>:13                                      ; preds = %0
  %14 = load i32* %b, align 4
  store i32 %14, i32* %1
  br label %15

; \<label>:15                                      ; preds = %13, %11
  %16 = load i32* %1
  ret i32 %16
}

;==========END BIGGER=============//

;==========LESS=================//
; Function Attrs: nounwind uwtable
define i32 @vecLES(%struct.vector* %left, %struct.vector* %right) #0 {
  %1 = alloca i32, align 4
  %2 = alloca %struct.vector*, align 8
  %3 = alloca %struct.vector*, align 8
  %size = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.vector* %left, %struct.vector** %2, align 8
  store %struct.vector* %right, %struct.vector** %3, align 8
  %4 = load %struct.vector** %2, align 8
  %5 = call i32 @sizeVector(%struct.vector* %4, i32 0)
  store i32 %5, i32* %size, align 4
  %6 = load %struct.vector** %2, align 8
  %7 = icmp eq %struct.vector* %6, null
  br i1 %7, label %8, label %12

; \<label>:8                                       ; preds = %0
  %9 = load %struct.vector** %3, align 8
  %10 = icmp eq %struct.vector* %9, null
  br i1 %10, label %11, label %12

; \<label>:11                                      ; preds = %8
  store i32 0, i32* %1
  br label %44

; \<label>:12                                      ; preds = %8, %0
  store i32 0, i32* %i, align 4
  br label %13

; \<label>:13                                      ; preds = %40, %12
  %14 = load i32* %i, align 4
  %15 = load i32* %size, align 4
  %16 = icmp slt i32 %14, %15
  br i1 %16, label %17, label %43

; \<label>:17                                      ; preds = %13
  %18 = load %struct.vector** %2, align 8
  %19 = getelementptr inbounds %struct.vector* %18, i32 0, i32 0
  %20 = load i32* %19, align 4
  %21 = load %struct.vector** %3, align 8
  %22 = getelementptr inbounds %struct.vector* %21, i32 0, i32 0
  %23 = load i32* %22, align 4
  %24 = icmp slt i32 %20, %23
  br i1 %24, label %25, label %38

; \<label>:25                                      ; preds = %17
  %26 = load %struct.vector** %2, align 8
  %27 = getelementptr inbounds %struct.vector* %26, i32 0, i32 1
  %28 = load %struct.vector** %27, align 8
  %29 = icmp eq %struct.vector* %28, null
  br i1 %29, label %30, label %31

; \<label>:30                                      ; preds = %25
  store i32 1, i32* %1
  br label %44

; \<label>:31                                      ; preds = %25
  %32 = load %struct.vector** %2, align 8
  %33 = getelementptr inbounds %struct.vector* %32, i32 0, i32 1
  %34 = load %struct.vector** %33, align 8
  store %struct.vector* %34, %struct.vector** %2, align 8
  %35 = load %struct.vector** %3, align 8
  %36 = getelementptr inbounds %struct.vector* %35, i32 0, i32 1
  %37 = load %struct.vector** %36, align 8
  store %struct.vector* %37, %struct.vector** %3, align 8
  br label %39

; \<label>:38                                      ; preds = %17
  store i32 0, i32* %1
  br label %44

; \<label>:39                                      ; preds = %31
  br label %40

; \<label>:40                                      ; preds = %39
  %41 = load i32* %i, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %i, align 4
  br label %13

; \<label>:43                                      ; preds = %13
  store i32 1, i32* %1
  br label %44

; \<label>:44                                      ; preds = %43, %38, %30, %11
  %45 = load i32* %1
  ret i32 %45
}
;=========END LESS=============//

;==========GRE=================//
; Function Attrs: nounwind uwtable
define i32 @vecGRE(%struct.vector* %left, %struct.vector* %right) #0 {
  %1 = alloca i32, align 4
  %2 = alloca %struct.vector*, align 8
  %3 = alloca %struct.vector*, align 8
  %size = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.vector* %left, %struct.vector** %2, align 8
  store %struct.vector* %right, %struct.vector** %3, align 8
  %4 = load %struct.vector** %2, align 8
  %5 = call i32 @sizeVector(%struct.vector* %4, i32 0)
  store i32 %5, i32* %size, align 4
  %6 = load %struct.vector** %2, align 8
  %7 = icmp eq %struct.vector* %6, null
  br i1 %7, label %8, label %12

; \<label>:8                                       ; preds = %0
  %9 = load %struct.vector** %3, align 8
  %10 = icmp eq %struct.vector* %9, null
  br i1 %10, label %11, label %12

; \<label>:11                                      ; preds = %8
  store i32 0, i32* %1
  br label %44

; \<label>:12                                      ; preds = %8, %0
  store i32 0, i32* %i, align 4
  br label %13

; \<label>:13                                      ; preds = %40, %12
  %14 = load i32* %i, align 4
  %15 = load i32* %size, align 4
  %16 = icmp slt i32 %14, %15
  br i1 %16, label %17, label %43

; \<label>:17                                      ; preds = %13
  %18 = load %struct.vector** %2, align 8
  %19 = getelementptr inbounds %struct.vector* %18, i32 0, i32 0
  %20 = load i32* %19, align 4
  %21 = load %struct.vector** %3, align 8
  %22 = getelementptr inbounds %struct.vector* %21, i32 0, i32 0
  %23 = load i32* %22, align 4
  %24 = icmp sgt i32 %20, %23
  br i1 %24, label %25, label %38

; \<label>:25                                      ; preds = %17
  %26 = load %struct.vector** %2, align 8
  %27 = getelementptr inbounds %struct.vector* %26, i32 0, i32 1
  %28 = load %struct.vector** %27, align 8
  %29 = icmp eq %struct.vector* %28, null
  br i1 %29, label %30, label %31

; \<label>:30                                      ; preds = %25
  store i32 1, i32* %1
  br label %44

; \<label>:31                                      ; preds = %25
  %32 = load %struct.vector** %2, align 8
  %33 = getelementptr inbounds %struct.vector* %32, i32 0, i32 1
  %34 = load %struct.vector** %33, align 8
  store %struct.vector* %34, %struct.vector** %2, align 8
  %35 = load %struct.vector** %3, align 8
  %36 = getelementptr inbounds %struct.vector* %35, i32 0, i32 1
  %37 = load %struct.vector** %36, align 8
  store %struct.vector* %37, %struct.vector** %3, align 8
  br label %39

; \<label>:38                                      ; preds = %17
  store i32 0, i32* %1
  br label %44

; \<label>:39                                      ; preds = %31
  br label %40

; \<label>:40                                      ; preds = %39
  %41 = load i32* %i, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %i, align 4
  br label %13

; \<label>:43                                      ; preds = %13
  store i32 1, i32* %1
  br label %44

; \<label>:44                                      ; preds = %43, %38, %30, %11
  %45 = load i32* %1
  ret i32 %45
}
;=========END GRE=============//

;==========EQ=================//
; Function Attrs: nounwind uwtable
define i32 @vecEQ(%struct.vector* %left, %struct.vector* %right) #0 {
  %1 = alloca i32, align 4
  %2 = alloca %struct.vector*, align 8
  %3 = alloca %struct.vector*, align 8
  %size = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.vector* %left, %struct.vector** %2, align 8
  store %struct.vector* %right, %struct.vector** %3, align 8
  %4 = load %struct.vector** %2, align 8
  %5 = call i32 @sizeVector(%struct.vector* %4, i32 0)
  store i32 %5, i32* %size, align 4
  %6 = load %struct.vector** %2, align 8
  %7 = icmp eq %struct.vector* %6, null
  br i1 %7, label %8, label %12

; \<label>:8                                       ; preds = %0
  %9 = load %struct.vector** %3, align 8
  %10 = icmp eq %struct.vector* %9, null
  br i1 %10, label %11, label %12

; \<label>:11                                      ; preds = %8
  store i32 1, i32* %1
  br label %44

; \<label>:12                                      ; preds = %8, %0
  store i32 0, i32* %i, align 4
  br label %13

; \<label>:13                                      ; preds = %40, %12
  %14 = load i32* %i, align 4
  %15 = load i32* %size, align 4
  %16 = icmp slt i32 %14, %15
  br i1 %16, label %17, label %43

; \<label>:17                                      ; preds = %13
  %18 = load %struct.vector** %2, align 8
  %19 = getelementptr inbounds %struct.vector* %18, i32 0, i32 0
  %20 = load i32* %19, align 4
  %21 = load %struct.vector** %3, align 8
  %22 = getelementptr inbounds %struct.vector* %21, i32 0, i32 0
  %23 = load i32* %22, align 4
  %24 = icmp eq i32 %20, %23
  br i1 %24, label %25, label %38

; \<label>:25                                      ; preds = %17
  %26 = load %struct.vector** %2, align 8
  %27 = getelementptr inbounds %struct.vector* %26, i32 0, i32 1
  %28 = load %struct.vector** %27, align 8
  %29 = icmp eq %struct.vector* %28, null
  br i1 %29, label %30, label %31

; \<label>:30                                      ; preds = %25
  store i32 1, i32* %1
  br label %44

; \<label>:31                                      ; preds = %25
  %32 = load %struct.vector** %2, align 8
  %33 = getelementptr inbounds %struct.vector* %32, i32 0, i32 1
  %34 = load %struct.vector** %33, align 8
  store %struct.vector* %34, %struct.vector** %2, align 8
  %35 = load %struct.vector** %3, align 8
  %36 = getelementptr inbounds %struct.vector* %35, i32 0, i32 1
  %37 = load %struct.vector** %36, align 8
  store %struct.vector* %37, %struct.vector** %3, align 8
  br label %39

; \<label>:38                                      ; preds = %17
  store i32 0, i32* %1
  br label %44

; \<label>:39                                      ; preds = %31
  br label %40

; \<label>:40                                      ; preds = %39
  %41 = load i32* %i, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %i, align 4
  br label %13

; \<label>:43                                      ; preds = %13
  store i32 1, i32* %1
  br label %44

; \<label>:44                                      ; preds = %43, %38, %30, %11
  %45 = load i32* %1
  ret i32 %45
}
;=========END EQ=============//

;==========NEQ=================//
; Function Attrs: nounwind uwtable
define i32 @vecNEQ(%struct.vector* %left, %struct.vector* %right) #0 {
  %1 = alloca i32, align 4
  %2 = alloca %struct.vector*, align 8
  %3 = alloca %struct.vector*, align 8
  %size = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.vector* %left, %struct.vector** %2, align 8
  store %struct.vector* %right, %struct.vector** %3, align 8
  %4 = load %struct.vector** %2, align 8
  %5 = call i32 @sizeVector(%struct.vector* %4, i32 0)
  store i32 %5, i32* %size, align 4
  %6 = load %struct.vector** %2, align 8
  %7 = icmp eq %struct.vector* %6, null
  br i1 %7, label %8, label %12

; \<label>:8                                       ; preds = %0
  %9 = load %struct.vector** %3, align 8
  %10 = icmp eq %struct.vector* %9, null
  br i1 %10, label %11, label %12

; \<label>:11                                      ; preds = %8
  store i32 0, i32* %1
  br label %44

; \<label>:12                                      ; preds = %8, %0
  store i32 0, i32* %i, align 4
  br label %13

; \<label>:13                                      ; preds = %40, %12
  %14 = load i32* %i, align 4
  %15 = load i32* %size, align 4
  %16 = icmp slt i32 %14, %15
  br i1 %16, label %17, label %43

; \<label>:17                                      ; preds = %13
  %18 = load %struct.vector** %2, align 8
  %19 = getelementptr inbounds %struct.vector* %18, i32 0, i32 0
  %20 = load i32* %19, align 4
  %21 = load %struct.vector** %3, align 8
  %22 = getelementptr inbounds %struct.vector* %21, i32 0, i32 0
  %23 = load i32* %22, align 4
  %24 = icmp ne i32 %20, %23
  br i1 %24, label %25, label %38

; \<label>:25                                      ; preds = %17
  %26 = load %struct.vector** %2, align 8
  %27 = getelementptr inbounds %struct.vector* %26, i32 0, i32 1
  %28 = load %struct.vector** %27, align 8
  %29 = icmp eq %struct.vector* %28, null
  br i1 %29, label %30, label %31

; \<label>:30                                      ; preds = %25
  store i32 1, i32* %1
  br label %44

; \<label>:31                                      ; preds = %25
  %32 = load %struct.vector** %2, align 8
  %33 = getelementptr inbounds %struct.vector* %32, i32 0, i32 1
  %34 = load %struct.vector** %33, align 8
  store %struct.vector* %34, %struct.vector** %2, align 8
  %35 = load %struct.vector** %3, align 8
  %36 = getelementptr inbounds %struct.vector* %35, i32 0, i32 1
  %37 = load %struct.vector** %36, align 8
  store %struct.vector* %37, %struct.vector** %3, align 8
  br label %39

; \<label>:38                                      ; preds = %17
  store i32 0, i32* %1
  br label %44

; \<label>:39                                      ; preds = %31
  br label %40

; \<label>:40                                      ; preds = %39
  %41 = load i32* %i, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %i, align 4
  br label %13

; \<label>:43                                      ; preds = %13
  store i32 1, i32* %1
  br label %44

; \<label>:44                                      ; preds = %43, %38, %30, %11
  %45 = load i32* %1
  ret i32 %45
}
;=========END NEQ=============//

;=========GET VALUE===========//
; Function Attrs: nounwind uwtable
define i32 @nextVecList(%struct.vector* %v) #0 {
  %1 = alloca %struct.vector*, align 8
  %val = alloca i32, align 4
  store %struct.vector* %v, %struct.vector** %1, align 8
  %2 = load %struct.vector** %1, align 8
  %3 = getelementptr inbounds %struct.vector* %2, i32 0, i32 0
  %4 = load i32* %3, align 4
  store i32 %4, i32* %val, align 4
  %5 = load i32* %val, align 4
  ret i32 %5
}

;===========INSERT===========//
; Function Attrs: nounwind uwtable
define %struct.vector* @insert(%struct.vector* %v, i32 %val) #0 {
  %1 = alloca %struct.vector*, align 8
  %2 = alloca %struct.vector*, align 8
  %3 = alloca i32, align 4
  %Rvec = alloca %struct.vector*, align 8
  %current = alloca %struct.vector*, align 8
  %newNode = alloca %struct.vector*, align 8
  store %struct.vector* %v, %struct.vector** %2, align 8
  store i32 %val, i32* %3, align 4
  %4 = load %struct.vector** %2, align 8
  %5 = icmp eq %struct.vector* %4, null
  br i1 %5, label %6, label %16

; \<label>:6                                       ; preds = %0
  %7 = call noalias i8* @malloc(i64 16) #3
  %8 = bitcast i8* %7 to %struct.vector*
  store %struct.vector* %8, %struct.vector** %current, align 8
  %9 = load %struct.vector** %current, align 8
  %10 = getelementptr inbounds %struct.vector* %9, i32 0, i32 1
  store %struct.vector* null, %struct.vector** %10, align 8
  %11 = load i32* %3, align 4
  %12 = load %struct.vector** %current, align 8
  %13 = getelementptr inbounds %struct.vector* %12, i32 0, i32 0
  store i32 %11, i32* %13, align 4
  %14 = load %struct.vector** %current, align 8
  store %struct.vector* %14, %struct.vector** %Rvec, align 8
  %15 = load %struct.vector** %Rvec, align 8
  store %struct.vector* %15, %struct.vector** %1
  br label %41

; \<label>:16                                      ; preds = %0
  %17 = load %struct.vector** %2, align 8
  store %struct.vector* %17, %struct.vector** %current, align 8
  %18 = load %struct.vector** %current, align 8
  store %struct.vector* %18, %struct.vector** %Rvec, align 8
  br label %19

; \<label>:19                                      ; preds = %16
  br label %20

; \<label>:20                                      ; preds = %25, %19
  %21 = load %struct.vector** %current, align 8
  %22 = getelementptr inbounds %struct.vector* %21, i32 0, i32 1
  %23 = load %struct.vector** %22, align 8
  %24 = icmp ne %struct.vector* %23, null
  br i1 %24, label %25, label %29

; \<label>:25                                      ; preds = %20
  %26 = load %struct.vector** %current, align 8
  %27 = getelementptr inbounds %struct.vector* %26, i32 0, i32 1
  %28 = load %struct.vector** %27, align 8
  store %struct.vector* %28, %struct.vector** %current, align 8
  br label %20

; \<label>:29                                      ; preds = %20
  %30 = call noalias i8* @malloc(i64 16) #3
  %31 = bitcast i8* %30 to %struct.vector*
  store %struct.vector* %31, %struct.vector** %newNode, align 8
  %32 = load i32* %3, align 4
  %33 = load %struct.vector** %newNode, align 8
  %34 = getelementptr inbounds %struct.vector* %33, i32 0, i32 0
  store i32 %32, i32* %34, align 4
  %35 = load %struct.vector** %newNode, align 8
  %36 = getelementptr inbounds %struct.vector* %35, i32 0, i32 1
  store %struct.vector* null, %struct.vector** %36, align 8
  %37 = load %struct.vector** %newNode, align 8
  %38 = load %struct.vector** %current, align 8
  %39 = getelementptr inbounds %struct.vector* %38, i32 0, i32 1
  store %struct.vector* %37, %struct.vector** %39, align 8
  %40 = load %struct.vector** %Rvec, align 8
  store %struct.vector* %40, %struct.vector** %1
  br label %41

; \<label>:41                                      ; preds = %29, %6
  %42 = load %struct.vector** %1
  ret %struct.vector* %42
}

;==========END INSERT =========//

;========MOVE==========//
; Function Attrs: nounwind uwtable
define %struct.vector* @move(%struct.vector* %v) #0 {
  %1 = alloca %struct.vector*, align 8
  %2 = alloca %struct.vector*, align 8
  %Rvec = alloca %struct.vector*, align 8
  store %struct.vector* %v, %struct.vector** %2, align 8
  %3 = load %struct.vector** %2, align 8
  %4 = getelementptr inbounds %struct.vector* %3, i32 0, i32 1
  %5 = load %struct.vector** %4, align 8
  %6 = icmp eq %struct.vector* %5, null
  br i1 %6, label %7, label %11

; \<label>:7                                       ; preds = %0
  %8 = call noalias i8* @malloc(i64 16) #3
  %9 = bitcast i8* %8 to %struct.vector*
  store %struct.vector* %9, %struct.vector** %Rvec, align 8
  %10 = load %struct.vector** %Rvec, align 8
  store %struct.vector* %10, %struct.vector** %1
  br label %15

; \<label>:11                                      ; preds = %0
  %12 = load %struct.vector** %2, align 8
  %13 = getelementptr inbounds %struct.vector* %12, i32 0, i32 1
  %14 = load %struct.vector** %13, align 8
  store %struct.vector* %14, %struct.vector** %1
  br label %15

; \<label>:15                                      ; preds = %11, %7
  %16 = load %struct.vector** %1
  ret %struct.vector* %16
}
;============END MOVE==========//

;=============START MAIN============//

define i32 @main(i32 %argc, i8** %argv) #0 {
>>

EndProg()::=<<
ret i32 0
}

;=============END MAIN============//

attributes #0 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Ubuntu clang version 3.6.0-2ubuntu1~trusty1 (tags/RELEASE_360/final) (based on LLVM 3.6.0)"}
>>

///=======================================================

DeclareInt(name)::= <<
    ;DECLARE INT
    %<name> = alloca i32, align 4
>>

AssignInt(name, regC)::=<<
    ;ASSIGN INT
    store i32 %<regC>, i32* %<name>, align 4
>>

PrintInt(regC, regV)::=<<
    ;PRINT INT RESULT
    %<regC> = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str99, i32 0, i32 0), i32 %<regV>)
>>

LoadInt(regC, val)::=<<
    ;LOAD INT
    %<regC> = add nsw i32 0, <val>
>>

LoadIntVar(regC, name)::=<<
    ;LOAD INT VAR
    %<regC> = load i32* %<name>, align 4
>>

//==========VECTOR===============//

DeclareVec(name)::= <<
    ;DECLARE VECTOR
    %<name> = alloca %struct.vector*, align 8
    store %struct.vector* null, %struct.vector** %<name>, align 8
>>

AssignVec(name, regC)::=<<
    ;ASSIGN VECTOR
    store %struct.vector* %<regC>, %struct.vector** %<name>, align 8
>>

PrintVec(regC)::=<<
    ;PRINT VECTOR
    call void @printVec(%struct.vector* %<regC>)
>>

LoadVecVar(regC, name)::=<<
    ;LOAD VEC VAR
    %<regC> = load %struct.vector** %<name>, align 8
>>

CalRange(regC, regL, regR)::=<<
    ;CALRANGE
    %<regC> = call %struct.vector* @Range(i32 %<regL>, i32 %<regR>)
>>

CalIndexI(regC, regV, regI)::=<<
  ;CALLINDEXI
  %<regC> = call i32 @returnIndex(%struct.vector* %<regV>, i32 %<regI>, i32 0)
>>

CalIndexV(regC, regV, regI)::=<<
  ;CALLINDEXV
  %<regC> = call %struct.vector* @returnIndexV(%struct.vector* %<regV>, %struct.vector* %<regI>)
>>


CalVecE(regC, regV, regS, type)::=<<
  ;CALLVECE
  %<regC> = call %struct.vector* @vectorE(%struct.vector* %<regV>, i32 %<regS>, i32 <type>)
>>

CalIntP(regC, regV, regI)::=<<
    :CALLINTP

    %<regC> = call %struct.vector* @intPromote(i32 %<regV>, i32 %<regI>)
>>

CalBig(regC, regL, regR)::=<<
    ;CALLBIG
    %<regC> = call i32 @bigger(%struct.vector* %<regL>, %struct.vector* %<regR>)
>>

CalgetVal(regP, regR, regC)::=<<
    ;GET VALUE
  %<regP> = load %struct.vector** %<regR>, align 8
  %<regC> = call i32 @nextVecList(%struct.vector* %<regP>)
>>

CalmoveP(regV, regC)::=<<
    ;GET CALMOVEP
   %<regC> = call %struct.vector* @move(%struct.vector* %<regV>)
>>

CalInsert(regC, regP, regV)::=<<
    ;INSERT
  %<regC> = call %struct.vector* @insert(%struct.vector* %<regP>, i32 %<regV>)
>>

//=========END VECTOR============//


//========MATH EXPR==============//
AddII(regL, regR, regC)::=<<
    ;ADDI
    %<regC> = add nsw i32 %<regL>, %<regR>
>>

AddV(regC, regL, regR)::=<<
    ;ADDV
     %<regC> = call %struct.vector* @vecAdd(%struct.vector* %<regL>, %struct.vector* %<regR>)
>>

SubII(regL, regR, regC)::=<<
    %<regC> = sub nsw i32 %<regL>, %<regR>
>>

SubV(regC, regL, regR)::=<<
    %<regC> = call %struct.vector* @vecSub(%struct.vector* %<regL>, %struct.vector* %<regR>)
>>

MulII(regL, regR, regC)::=<<
    %<regC> = mul nsw i32 %<regL>, %<regR>
>>

MulV(regC, regL, regR)::=<<
    %<regC> = call %struct.vector* @vecMul(%struct.vector* %<regL>, %struct.vector* %<regR>)
>>

DivII(regL, regR, regC)::=<<
    %<regC> = sdiv i32 %<regL>, %<regR>
>>

DivV(regC, regL, regR)::=<<
    %<regC> = call %struct.vector* @vecDiv(%struct.vector* %<regL>, %struct.vector* %<regR>)
>>

//========END MATH EXPR==============//

//========COMPARE==============//



EQ(regL, regR, regC, regC2)::=<<
    %<regC> = icmp eq i32 %<regL>, %<regR>
    %<regC2> = zext i1 %<regC> to i32
>>

VEQ(regC, regL, regR)::=<<
  %<regC> = call i32 @vecEQ(%struct.vector* %<regL>, %struct.vector* %<regR>)
>>

NEQ(regL, regR, regC, regC2)::=<<
    %<regC> = icmp ne i32 %<regL>, %<regR>
    %<regC2> = zext i1 %<regC> to i32
>>

VNEQ(regC, regL, regR)::=<<
  %<regC> = call i32 @vecNEQ(%struct.vector* %<regL>, %struct.vector* %<regR>)
>>

GRE(regL, regR, regC, regC2)::=<<
    %<regC> = icmp sgt i32 %<regL>, %<regR>
    %<regC2> = zext i1 %<regC> to i32
>>

VGRE(regC, regL, regR)::=<<
  %<regC> = call i32 @vecGRE(%struct.vector* %<regL>, %struct.vector* %<regR>)
>>

LES(regL, regR, regC, regC2)::=<<
    %<regC> = icmp slt i32 %<regL>, %<regR>
    %<regC2> = zext i1 %<regC> to i32
>>

VLES(regC, regL, regR)::=<<
    %<regC> = call i32 @vecLES(%struct.vector* %<regL>, %struct.vector* %<regR>)
>>


//========END COMPARE==============//

//===========IF============//
IFHOLDER()::=<<
    I AM A HOLDER
>>


IF(regP, regCmp, regC, regE)::=<<
    ;START IF
    br i1  %<regCmp>, label %<regC>, label %<regE>
    ; \<label>:<regC>               ; preds = %0

>>

ENDIF(regC, regE)::=<<
    ;END IF
    br label %<regE>
    ; \<label>:<regE>               ; preds = %<regC>, %0
>>

//=========END IF================//

//===========LOOP============//

LOOPHOLDER()::=<<
    LOOP HOLDER
>>

LOOP(regC, regCE)::=<<
    ;START LOOP
    br label %<regC>
    ; \<label>:<regC>          ; preds = %<regCE>, %0
>>

CONDLOOP(regP, regC, regLE, regLS)::=<<
    ;START AFTER EVAL
    br i1 %<regP>, label %<regC>, label %<regLE>
    ; \<label>:<regC>          ; preds = %<regLS>
>>

ENDLOOP(regLS, regC)::=<<
    br label %<regLS>
    ; \<label>:<regC>          ; preds = %<regLS>
>>


//===========END LOOP============//


//===========HELPER TEMPLATE=====//
CHECKINT(regC, regP)::=<<
    %<regC> = icmp ne i32 %<regP>, 0
>>

//=======END HELPER TEMPLATE=====//


